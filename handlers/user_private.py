import logging

from aiogram import Bot, Router, types, F
from aiogram.filters import Command, CommandStart
from sqlalchemy.future import select
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove


from filters.chat_types import ChatTypeFilter, IsAdmin
from database.db import async_session
from database.models import GroupSettings, AdminSession
from keyboards.inline import admin_control_keyboard
from keyboards.reply import kb_admin

from utils.states import SetCaptchaTimeStates

private_router = Router()
private_router.message.filter(ChatTypeFilter(['private']))


@private_router.message(Command("start"))
async def cmd_start(message: types.Message, bot: Bot):
    botname = await bot.get_my_name()
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, —è *{botname.name}* ü§ñ\n"
        "–°–æ–∑–¥–∞–Ω —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–∞—Ç–æ–≤ üîß\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏ –≤ –≥—Ä—É–ø–ø–µ –∫–æ–º–∞–Ω–¥—É `/admininit` –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º ‚ÑπÔ∏è",
        parse_mode="Markdown"
        )


# @private_router.message(Command("help"))
# async def cmd_help(message: types.Message):
#     await message.answer(
#         "–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É:\n"
#         "/admininit - –∫–æ–º–∞–Ω–¥–∞ –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n"
#         "/connect -100... - –∫–æ–º–∞–Ω–¥–∞ –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ\n"
#         )



# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@private_router.message(Command("cancel"))
async def cancel_handler(message: types.Message, state: FSMContext) -> None:

    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info("Cancelling state %r", current_state)
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=kb_admin)


@private_router.message(Command("connect"))
async def connect_group(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
    if not text.startswith("/connect -"):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/connect -100..`")
        return

    try:
        group_id = int(text.split()[1])
    except (IndexError, ValueError):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≥—Ä—É–ø–ø—ã.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –≤ –ë–î
    async with async_session() as session:
        try:
            await session.merge(AdminSession(admin_id=user_id, group_id=group_id))
            await session.commit()

        finally:
            await session.close()

    await message.answer(
        f"‚úÖ –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –≥—Ä—É–ø–ø–µ —Å ID {group_id}\n"
        "‚å®Ô∏è –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É",
        reply_markup=kb_admin
        )


@private_router.message(F.text.lower() == "–∞–¥–º–∏–Ω–∫–∞", IsAdmin())
@private_router.message(Command("admpanel"), IsAdmin())
async def cmd_admin_panel(message: types.Message):
    await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=kb_admin)


@private_router.message(F.text.lower() == "–ø–æ–º–æ—â—å", IsAdmin())
@private_router.message(Command("admhelp"), IsAdmin())
async def cmd_help_admin(message: types.Message):
    await message.answer(
        "<b>–§—É–Ω–∫—Ü–∏–∏ –≤ –±–æ—Ç–µ:</b>\n"
        "–°–µ—Ä–≤—Å–∏–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞\n"
        "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏\n\n"
        "<b>–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ:</b>\n"
        "/mute - –≤—ã–¥–∞—Ç—å –º—É—Ç —É—á–∞—Å—Ç–Ω–∏–∫—É –≥—Ä—É–ø–ø—ã\n"
        "/unmute - —É–±—Ä–∞—Ç—å –º—É—Ç —É —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã\n"
        "/ban - –∑–∞–±–∞–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã\n",
        parse_mode="HTML"
    )

@private_router.message(F.text.lower() == "—Å–µ—Ä–≤–∏—Å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", IsAdmin())
@private_router.message(Command("settings"), IsAdmin())
async def show_admin_panel(message: types.Message):
    user_id = message.from_user.id

    async with async_session() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –∞–¥–º–∏–Ω–∞
            result = await session.execute(
                select(AdminSession.group_id).where(AdminSession.admin_id == user_id)
                )
            selected_group = result.scalar()

            if not selected_group:
                await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –≥—Ä—É–ø–ø–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/connect`.")
                return

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
            result = await session.execute(
                select(GroupSettings).where(GroupSettings.group_id == selected_group)
            )
            group = result.scalar()

            if not group:
                await message.answer("üîé –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏–∑ –ë–î
            cleansrv_status = group.delete_join_leave_messages
            joinrequest_status = group.approve_requests

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await message.answer(
                "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞:",
                reply_markup=admin_control_keyboard(cleansrv_status, joinrequest_status)
            )
        except Exception as e:
            await session.rollback()
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        finally:
            await session.close()



@private_router.callback_query(lambda c: c.data in ["toggle_cleansrv", "toggle_joinrequest", "refresh_status"])
async def handle_admin_callback(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id

    async with async_session() as session:
        try:


            result = await session.execute(
                select(GroupSettings)
                .join(AdminSession, GroupSettings.group_id == AdminSession.group_id)
                .where(AdminSession.admin_id == user_id)
            )
            group = result.scalar()

            if not group:
                await callback.answer("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return

            if callback.data == "toggle_cleansrv":
                group.delete_join_leave_messages = not group.delete_join_leave_messages
                await session.commit()
                status_text = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if group.delete_join_leave_messages else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
                await callback.answer(f"–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {status_text}")

            elif callback.data == "toggle_joinrequest":
                group.approve_requests = not group.approve_requests
                await session.commit()
                status_text = "üü¢ –í–∫–ª—é—á–µ–Ω–æ" if group.approve_requests else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–æ"
                await callback.answer(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫: {status_text}")

            elif callback.data == "refresh_status":
                await callback.answer("üîÑ –°—Ç–∞—Ç—É—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await callback.message.edit_text(
                 "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞:",
                reply_markup=admin_control_keyboard(group.delete_join_leave_messages, group.approve_requests)
            )

        except Exception as e:
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
            print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π: {e}")

        finally:
            await session.close()  # üü¢ –í–ê–ñ–ù–û! –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é



@private_router.message(F.text.lower() == "–≤—Ä–µ–º—è –∫–∞–ø—á–∏", IsAdmin())
async def set_captcha_time(message: types.Message, state: FSMContext):
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞–ø—á–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö –æ—Ç 1 –¥–æ 60:\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel",
        reply_markup=ReplyKeyboardRemove()
        )
    await state.set_state(SetCaptchaTimeStates.waiting_for_captcha_time)


@private_router.message(SetCaptchaTimeStates.waiting_for_captcha_time)
async def enter_captcha_time(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if not message.text.isdigit():
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 60.")
        return

    timeout = int(message.text)

    if timeout < 1 or timeout > 60:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 60.")
        return

    async with async_session() as session:
        try:
            result = await session.execute(
                select(GroupSettings)
                .join(AdminSession, GroupSettings.group_id == AdminSession.group_id)
                .where(AdminSession.admin_id == user_id)
            )
            group = result.scalar()

            if not group:
                await message.answer("‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.")
                return

            group.captcha_timeout = timeout
            await session.commit()

            await message.answer(f"‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞–ø—á–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {timeout} –º–∏–Ω—É—Ç.")
            await state.clear()

        except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")





















# @private_router.message(Command("disconnect"), IsAdmin())
# async def disconnect_group(message: types.Message):
#     user_id = message.from_user.id

#     async with async_session() as session:
#         try:
#             # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –∞–¥–º–∏–Ω–∞
#             result = await session.get(AdminSession, user_id)

#             if not result:
#                 await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã.")
#                 return

#             # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ AdminSession
#             await session.delete(result)
#             await session.commit()

#             await message.answer("üîå –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å –æ—Ç –≥—Ä—É–ø–ø—ã.")

#         finally:
#             await session.close()
