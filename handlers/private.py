import asyncio

from aiogram import Bot, Router, types
from aiogram.types import ChatJoinRequest
from aiogram.filters import Command
from datetime import datetime, timedelta
from aiogram.exceptions import TelegramBadRequest
from apscheduler.jobstores.base import JobLookupError

from utils.service import scheduler
from keyboards.inline import verify_kb

private_router = Router()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∑–∞—è–≤–æ–∫
pending_users = {}

@private_router.chat_join_request()
async def handle_chat_join_request(event: ChatJoinRequest, bot: Bot):
    chat_id = event.chat.id
    user_id = event.from_user.id

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        msg = await bot.send_message(
            user_id,
            f"–ü—Ä–∏–≤–µ—Ç, {event.from_user.first_name}! –ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —á–∞—Ç "
            "<b>Real_Petrovskii –î–Ω–µ–ø—Ä —á–∞—Ç</b>, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –±–æ—Ç üëá",
            reply_markup=verify_kb,
            parse_mode="HTML"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º id —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        pending_users[user_id] = (chat_id, msg.message_id)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 30 –º–∏–Ω—É—Ç
        run_time = datetime.utcnow() + timedelta(minutes=1)
        job_id = f"reject_{user_id}"
        scheduler.add_job(
            reject_request,
            "date",
            run_date=run_time,
            args=[bot, chat_id, user_id, msg.message_id],
            id=job_id
        )
    except TelegramBadRequest:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å—Ä–∞–∑—É –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É
        await bot.decline_chat_join_request(chat_id, user_id)


async def reject_request(bot: Bot, group_id: int, user_id: int, message_id: int):
    #–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
    if user_id in pending_users:
        try:
            # –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É
            await bot.decline_chat_join_request(group_id, user_id)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await bot.edit_message_text(
                chat_id=user_id,
                message_id=message_id,
                text="üõë –í—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ—é –ª–∏—á–Ω–æ—Å—Ç—å, –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
                parse_mode="HTML"
            )

        except TelegramBadRequest:
            pass

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        pending_users.pop(user_id, None)

@private_router.callback_query(lambda c: c.data == "not_a_bot")
async def verify_user(callback: types.CallbackQuery, bot: Bot, group_id: int):
    user_id = callback.from_user.id

    if user_id in pending_users:
        group_id, msg_id = pending_users[user_id]
        job_id = f"reject_{user_id}"

        try:
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞—è–≤–∫—É
            await bot.approve_chat_join_request(group_id, user_id)
            await callback.message.edit_text(
                "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç")

            if scheduler.get_job(job_id):
                scheduler.remove_job(job_id)

        except TelegramBadRequest as e:
            print(f"–û—à–∏–±–∫–∞: {e}")

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        pending_users.pop(user_id, None)

    await callback.answer()


@private_router.message(Command("about"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—é —á–∞—Ç–∞ üëÄ")


