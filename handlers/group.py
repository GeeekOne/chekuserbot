from aiogram import Bot, Router, F, types
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
# from aiogram.types.chat_member_updated import ChatMemberUpdated
# from aiogram.enums.chat_member_status import ChatMemberStatus
from aiogram.types import ChatMemberUpdated
from aiogram.enums import ChatMemberStatus
from datetime import timedelta
from sqlalchemy.future import select

from filters.chat_types import ChatTypeFilter, IsAdmin
from database.db import async_session
from database.models import GroupSettings


group_router = Router()
group_router.message.filter(ChatTypeFilter(['group', 'supergroup']))
group_router.edited_message.filter(ChatTypeFilter(['group', 'supergroup']))


@group_router.my_chat_member()
async def bot_removed_from_group(event: types.ChatMemberUpdated, bot: Bot):
    print(f"üîç –ü–û–õ–£–ß–ï–ù–û –°–û–ë–´–¢–ò–ï: {event}")
    """–£–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–µ, –µ—Å–ª–∏ –±–æ—Ç–∞ –∏—Å–∫–ª—é—á–∏–ª–∏."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω
    if event.new_chat_member.user.id == (await bot.get_me()).id:
       if event.new_chat_member.status in {ChatMemberStatus.LEFT, ChatMemberStatus.KICKED}:

        group_id = event.chat.id
        print(f"‚ö†Ô∏è –ë–æ—Ç–∞ —É–¥–∞–ª–∏–ª–∏ –∏–∑ –≥—Ä—É–ø–ø—ã {group_id}, –æ—á–∏—â–∞–µ–º –ë–î...")

        async with async_session() as session:
            try:
                result = await session.execute(
                    select(GroupSettings).where(GroupSettings.group_id == group_id))
                group = result.scalar()

                if group:
                    print(f"[LOG]üîÑ –ù–∞–π–¥–µ–Ω–æ –≤ –ë–î, —É–¥–∞–ª—è—é –≥—Ä—É–ø–ø—É {group_id}")
                    await session.delete(group)
                    await session.commit()
                    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã {group_id} —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ë–î.")
                else:
                    print(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ {group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î, —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            except Exception as e:
                await session.rollback()  # –û—Ç–∫–∞—Ç, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã {group_id} –∏–∑ –ë–î: {e}")


# –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –≤—Ö–æ–¥–µ/–≤—ã—Ö–æ–¥–µ
@group_router.message(lambda message: message.new_chat_members or message.left_chat_member)
async def delete_service_messages(message: types.Message, bot: Bot):
    if message.chat.type != "supergroup":
        return

    async with async_session() as session:
        result = await session.execute(
            select(GroupSettings).where(GroupSettings.group_id == message.chat.id))
        group = result.scalar()

        if group and group.delete_join_leave_messages == 1:
            if message.new_chat_members or message.left_chat_member:
                try:
                    await bot.delete_message(message.chat.id, message.message_id)
                except TelegramForbiddenError:
                    print(f"‚ö†Ô∏è –ë–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã {message.chat.id}, –Ω–µ –º–æ–≥—É —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                except TelegramBadRequest as e:
                    if "CHANNEL_PRIVATE" in str(e):
                        print("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –∫–∞–Ω–∞–ª –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


@group_router.message(Command("admininit"))
async def get_admins(message: types.Message, bot: Bot):
    if message.chat.type != "supergroup":
        await message.answer("‚ùå–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö.")
        return

    group_id = message.chat.id
    group_name = message.chat.title
    # print(f"[LOG] –ü–æ–ª—É—á–µ–Ω–Ω—ã–π group_id: {group_id}")
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –≥—Ä—É–ø–ø—ã
    try:
        chat_admins = await bot.get_chat_administrators(group_id)
        admin_ids = [admin.user.id for admin in chat_admins if admin.status in (
            "creator", "administrator")]

        if user_id not in admin_ids:
            await message.delete()
            return

        admin_list = ",".join(map(str, admin_ids))
        # print(f"[LOG] –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—ã: {admin_list}")

        if not admin_ids:
            await message.answer("‚ö†Ô∏è –í –≥—Ä—É–ø–ø–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return

    except TelegramBadRequest:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –≥—Ä—É–ø–ø—ã.")
        return

    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤: {e}")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    async with async_session() as session:
        result = await session.execute(
            select(GroupSettings).where(GroupSettings.group_id == int(group_id))
            )
        existing_group = result.scalar()

        if existing_group:
            existing_group.admin_ids = admin_list
        else:
            new_group = GroupSettings(group_id=group_id, admin_ids=admin_list)
            session.add(new_group)

        await session.commit()
        # print(f"[LOG] –ì—Ä—É–ø–ø–∞ {group_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î —Å –∞–¥–º–∏–Ω–∞–º–∏: {admin_list}")

    await message.answer("‚úÖ –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ ID –≥—Ä—É–ø–ø—ã –≤ –ª–∏–∏—á–∫—É —Ç–æ–º—É –∫—Ç–æ –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É
    try:
        await bot.send_message(
            user_id,
            f"‚úÖ –ì—Ä—É–ø–ø–∞ {group_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞\n\n"
            f"üîπ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã: `{group_id}`\n\n"
            f"‚è© –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –≥—Ä—É–ø–ø—ã: `/connect {group_id}`",
            parse_mode="Markdown"
        )
    except TelegramBadRequest:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {user_id}. –í–æ–∑–º–æ–∂–Ω–æ, —É –Ω–µ–≥–æ –∑–∞–∫—Ä—ã—Ç—ã –õ–°.")



# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –º—É—Ç–∞
def format_duration_with_emoji(duration: str) -> str:
    if duration.endswith("m"):
        return f"{duration[:-1]} –º–∏–Ω—É—Ç ‚è≥"
    elif duration.endswith("h"):
        return f"{duration[:-1]} —á–∞—Å–æ–≤ ‚è∞"
    elif duration.endswith("d"):
        return f"{duration[:-1]} –¥–Ω–µ–π üìÖ"
    return duration

# –ö–æ–º–∞–Ω–¥–∞ /mute
@group_router.message(Command("mute"), IsAdmin())
async def mute_user(message: types.Message, bot: Bot):
    print(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /mute –æ—Ç {message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id}")
    if not message.reply_to_message:
        return await message.answer("–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    args = message.text.split()
    if len(args) < 2:
        return await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mute <–≤—Ä–µ–º—è> (–Ω–∞–ø—Ä–∏–º–µ—Ä 10m, 2h, 1d)")

    duration = args[1]
    target_user = message.reply_to_message.from_user
    duration_seconds = None

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥—ã
    if duration.endswith("m"):
        duration_seconds = int(duration[:-1]) * 60
    elif duration.endswith("h"):
        duration_seconds = int(duration[:-1]) * 3600
    elif duration.endswith("d"):
        duration_seconds = int(duration[:-1]) * 86400
    else:
        return await message.reply(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
            "m - –º–∏–Ω—É—Ç—ã"
            "h - —á–∞—Å—ã"
            "d - –¥–Ω–∏")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∫–Ω–µ–π–º–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if target_user.username:
        mention = f"@{target_user.username}"
    else:
        mention = f'<a href="tg://user?id={target_user.id}">{target_user.full_name}</a>'

    try:
        until_date = message.date + timedelta(seconds=duration_seconds)
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=target_user.id,
            permissions=types.ChatPermissions(can_send_messages=False),
            until_date=until_date
        )
        await message.reply(
            f"üîá {mention} –∑–∞–º—å—é—á–µ–Ω –Ω–∞ <b>{format_duration_with_emoji(duration)}</b>.",
            parse_mode="HTML"
        )

    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")

    except TelegramBadRequest as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /ban
@group_router.message(Command("ban"), IsAdmin())
async def ban_user(message: types.Message, bot: Bot):
    if not message.reply_to_message:
        return await message.answer("–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    target_user = message.reply_to_message.from_user

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∫–Ω–µ–π–º–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if target_user.username:
        mention = f"@{target_user.username}"
    else:
        mention = f'<a href="tg://user?id={target_user.id}">{target_user.full_name}</a>'


    try:
        await bot.ban_chat_member(chat_id=message.chat.id, user_id=target_user.id)
        await message.reply(f"üö´ {mention} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.", parse_mode="HTML")

    except TelegramBadRequest as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /unmute
@group_router.message(Command("unmute"), IsAdmin())
async def unmute_user(message: types.Message, bot: Bot):
    if not message.reply_to_message:
        return await message.reply("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã —Ä–∞–∑–º—å—é—Ç–∏—Ç—å –µ–≥–æ.")

    target_user = message.reply_to_message.from_user

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∫–Ω–µ–π–º–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if target_user.username:
        mention = f"@{target_user.username}"
    else:
        mention = f'<a href="tg://user?id={target_user.id}">{target_user.full_name}</a>'


    try:
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=target_user.id,
            permissions=types.ChatPermissions(can_send_messages=True)
        )
        await message.reply(f"üîä {mention} —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç.", parse_mode="HTML")

    except TelegramBadRequest as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")
